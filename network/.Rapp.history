x <- read.csv('~/Dropbox/hawaiidimensions/geb_paper/network/data/hemiptera_list.csv')
x$Author
x <- read.csv('~/Dropbox/hawaiidimensions/geb_paper/network/data/hemiptera_list.csv', as.is=TRUE)
x$Author
unique(x$Author)
bsub()
gsub('[[^:punct:]]')
gsub('[[:punct:]]', '', 'abc.d')
gsub('[[:punct:]]', '', x$Author)
unique(gsub('[[:punct:]]', '', x$Author))
d, p and r functions for the maxent link distribution#
## also a funciton to calculate the MLE and log likelihood#
#
dmelink <- function(x, la) {#
	exp(-la*(x-1)) - exp(-la*x)#
}#
#
pmelink <- function(x, la, lower.tail=TRUE) {#
	if(length(x) > 1) {#
		cp <- sapply(x, function(q) sum(dmelink(1:q, la)))#
	} else {#
		cp <- sum(dmelink(1:x, la))#
	}#
	if(lower.tail) {#
		return(cp)#
	} else {#
		return(1 - cp)#
	}#
}#
#
rmelink <- function(n, la, X0) {#
	# xtemp <- sample(1:X0, round(1.5*n), rep=TRUE, prob=dexp(1:X0, la)*1.1)#
	# ytemp <- runif(round(1.5*n), 0, dexp(xtemp)*1.1)#
	# x <- xtemp[dmelink(xtemp, la) >= ytemp]#
	# xy <- cbind(sample(1:X0, n*50, rep=TRUE), runif(n*50, 0, dmelink(1, la)*1.1))#
	# x <- xy[dmelink(xy[, 1], la) >= xy[, 2], 1]#
	min.prob <- dmelink(X0, la)*10#
	if(min.prob < 1e-08*dmelink(1, la)) min.prob <- 1e-04*dmelink(1, la)#
	probs <- seq(dmelink(1, la)*1.5, min.prob, length=X0)#
	## extra sampling needed to hit n total#
	extraN <-round(100*la) + 20#
	xtemp <- sample(1:X0, n * extraN, rep=TRUE, prob=probs)#
	ytemp <- runif(n * extraN, 0, probs[xtemp])#
	x <- xtemp[dmelink(xtemp, la) >= ytemp]#
	if(length(x) > n) return(x[1:n])#
	else return(x)#
}#
#
qmelink <- function(x, la) {#
	fun <- DiscreteDistribution(1:3000, dmelink(1:3000, la))#
	fun@q(x)#
}#
#
## likelihood functions#
melink.mle <- function(x) {#
	log(1 + 1 / mean(x - 1))#
}#
#
melink.logLik <- function(x) {#
	la <- melink.mle(x)#
	length(x) * log(1 - exp(-la)) - la * sum(x - 1)#
}
source('~/R_functions/my_ecdf.R')
la <- 0.001#
x <- rmelink(2000, la, 200)#
length(x)#
plot(my.ecdf(x))#
lines(pmelink(1:200, melink.mle(x)), col='red')#
melink.logLik(x) - sum(log(dmelink(x, melink.mle(x)))) < 1e-12
hist(x)
test it#
la <- 0.1#
x <- rmelink(2000, la, 200)#
length(x)#
plot(my.ecdf(x))
lines(pmelink(1:200, melink.mle(x)), col='red')
la <- 0.01#
x <- rmelink(2000, la, 200)#
length(x)#
plot(my.ecdf(x))#
lines(pmelink(1:200, melink.mle(x)), col='red')
la <- 0.01#
x <- rmelink(2000, la, 2000)#
length(x)#
plot(my.ecdf(x))#
lines(pmelink(1:200, melink.mle(x)), col='red')
rmelink <- function(n, la, X0) {#
	sample(X0, n, rep=TRUE, prob=dmelink(1:X0, la))#
}
la <- 0.01#
x <- rmelink(2000, la, 2000)#
length(x)#
plot(my.ecdf(x))#
lines(pmelink(1:200, melink.mle(x)), col='red')
la <- 0.01#
x <- rmelink(2000, la, 2000)#
melink.mle(x)#
plot(my.ecdf(x))#
lines(pmelink(1:200, melink.mle(x)), col='red')
d, p and r functions for the maxent link distribution#
## also a funciton to calculate the MLE and log likelihood#
#
dmelink <- function(x, la) {#
	exp(-la*(x-1)) - exp(-la*x)#
}#
#
pmelink <- function(x, la, lower.tail=TRUE) {#
	if(length(x) > 1) {#
		cp <- sapply(x, function(q) sum(dmelink(1:q, la)))#
	} else {#
		cp <- sum(dmelink(1:x, la))#
	}#
	if(lower.tail) {#
		return(cp)#
	} else {#
		return(1 - cp)#
	}#
}#
#
# rmelink <- function(n, la, X0) {#
	# # xtemp <- sample(1:X0, round(1.5*n), rep=TRUE, prob=dexp(1:X0, la)*1.1)#
	# # ytemp <- runif(round(1.5*n), 0, dexp(xtemp)*1.1)#
	# # x <- xtemp[dmelink(xtemp, la) >= ytemp]#
	# # xy <- cbind(sample(1:X0, n*50, rep=TRUE), runif(n*50, 0, dmelink(1, la)*1.1))#
	# # x <- xy[dmelink(xy[, 1], la) >= xy[, 2], 1]#
	# min.prob <- dmelink(X0, la)*10#
	# if(min.prob < 1e-08*dmelink(1, la)) min.prob <- 1e-04*dmelink(1, la)#
	# probs <- seq(dmelink(1, la)*1.5, min.prob, length=X0)#
	# ## extra sampling needed to hit n total#
	# extraN <-round(100*la) + 20#
	# xtemp <- sample(1:X0, n * extraN, rep=TRUE, prob=probs)#
	# ytemp <- runif(n * extraN, 0, probs[xtemp])#
	# x <- xtemp[dmelink(xtemp, la) >= ytemp]#
	# if(length(x) > n) return(x[1:n])#
	# else return(x)#
# }#
#
rmelink <- function(n, la, X0) {#
	sample(X0, n, rep=TRUE, prob=dmelink(1:X0, la))#
}#
qmelink <- function(x, la) {#
	fun <- DiscreteDistribution(1:3000, dmelink(1:3000, la))#
	fun@q(x)#
}#
#
## likelihood functions#
melink.mle <- function(x) {#
	log(1 + 1 / mean(x - 1))#
}#
#
melink.logLik <- function(x) {#
	la <- melink.mle(x)#
	length(x) * log(1 - exp(-la)) - la * sum(x - 1)#
}#
## test it#
# la <- 0.01#
# x <- rmelink(2000, la, 2000)#
# melink.mle(x)#
# plot(sort(x, TRUE))#
# lines(pmelink(1:200, melink.mle(x)), col='red')#
# melink.logLik(x) - sum(log(dmelink(x, melink.mle(x)))) < 1e-12#
#
melink.rankFun <- function(x) {#
	qmelink(seq(1-1/(length(x)+1), 1/(length(x)+1), by=-1/(length(x)+1)), melink.mle(x)#
}#
#
melink.mse <- function(x) {#
	mean((sort(x, TRUE) - melink.rankFun(x))^2)#
}#
#
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		sim <- rmelink(length(x), la, X0)#
		return(melink.,se(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return((obs.mse - mean(res)) / sd(res))#
}
melink.rankFun <- function(x) {#
	qmelink(seq(1-1/(length(x)+1), 1/(length(x)+1), by=-1/(length(x)+1)), melink.mle(x))#
}
x <- rmelink(100, 0.5, 200)
plot(my.ecdf(x))
sim.melink.z(x, 200)
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		sim <- rmelink(length(x), la, X0)#
		return(melink.mse(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return((obs.mse - mean(res)) / sd(res))#
}#
#
## test it#
x <- rmelink(100, 0.5, 200)#
sim.melink.z(x, 200)
library(distr)
sim.melink.z(x, 200)
sim.melink.z(rbinom(100, 200, 0.1), 200)
x <- rmelink(100, 0.5, 200)#
sim.melink.z(x, 200)#
sim.melink.z(rbinom(100, 200, 0.1), 200)
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	this.rfun <- melink.rankFun(x)#
	res <- replicate(nsim, {#
		sim <- rmelink(length(x), la, X0)#
		return(mean((sim - this.rfun)^2))#
	})#
	obs.mse <- melink.mse(x)#
	return((obs.mse - mean(res)) / sd(res))#
}#
#
## test it#
# x <- rmelink(100, 0.5, 200)#
sim.melink.z(x, 200)#
sim.melink.z(rbinom(100, 200, 0.1), 200)
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		sim <- rmelink(length(x), la, X0)#
		return(melink.mse(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return((obs.mse - mean(res)) / sd(res))#
}
sim.melink.z(x, 200)
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		sim <- rmelink(length(x), la, X0)#
		return(melink.mse(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return(list(obs=obs, z=(obs.mse - mean(res)) / sd(res), sim=res))#
}
source('~/R_functions/denfill.R')
source('~/R_functions/den_fill.R')
rowSums(bimat[[1]])
library(bipartite)#
library(vegan)#
library(igraph)#
#
setwd('~/Dropbox/hawaiiDimensions/geb_paper/network')#
source('~/R_functions/my_ecdf.R')#
source('~/R_functions/logAxis.R')#
source('~/R_functions/den_fill.R')#
source('netFuns.R')#
#
## *****************************#
## Prep data#
## *****************************#
#
## get site info and specify which sites to analyze#
site.info <- read.csv('data/siteInfo.csv', as.is=TRUE)#
good.sites <- c('Kil', 'Koh', 'Hal', 'KoK')#
#
## load data#
bimat <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_unconmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})#
#
bimat.con <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_conmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})#
#
## load network metric files#
netmet.prob <- read.csv('networkMetrics_prob1.csv', as.is=TRUE)#
netmet.qswap <- read.csv('networkMetrics_qswap.csv', as.is=TRUE)#
netmet <- rbind(netmet.prob, netmet.qswap)#
#
netmet.prob.con <- read.csv('networkMetrics_con_prob1.csv', as.is=TRUE)
rowSums(bimat[[1]])
x <- x[x > 0]
X0 <- sum(colSums(bimat[[1]]) > 0)
sim.melink.z(x, X0)
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		sim <- rmelink(length(x), la, X0)#
		return(melink.mse(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return(list(obs=obs.mse, z=(obs.mse - mean(res)) / sd(res), sim=res))#
}
sim.melink.z(x, X0)
length(x)
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		browser()#
		sim <- rmelink(length(x), la, X0)#
		return(melink.mse(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return(list(obs=obs.mse, z=(obs.mse - mean(res)) / sd(res), sim=res))#
}
sim.melink.z(x, X0)
sim <- rmelink(length(x), la, X0)
plot(sort(sim, TRUE))
melink.rankFun(sim)
lines(melink.rankFun(sim))
plot(sort(sim, TRUE), log='y')
lines(melink.rankFun(sim))
plot(sort(sim, TRUE), log='y', ylim=c(1, 15))
lines(melink.rankFun(sim))
points(sort(x, TRUE), col='red')
lines(melink.rankFun(x), col='red')
Q
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
}
x <- rowSums(bimat[[1]])#
x <- x[x > 0]
screen(3)
points(sort(x, TRUE), col='blue')
x <- rowSums(bimat[[1]])#
x <- x[x > 0]
points(sort(x, TRUE), col='blue')
x
i <- 1
degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))
x <- rowSums(bimat[[1]])#
x <- x[x > 0]#
points(sort(x, TRUE), col='blue')
melink.rankFun(x)
lines(melink.rankFun(x))
X0 <- sum(colSums(bimat[[1]]) > 0)
sim.melink.z(x, X0)
sim <- rmelink(length(x), la, X0)
points(sort(sim, TRUE), col='red')
points(sort(x, TRUE))
lines(melink.rankFun(sim), col='red')
lines(melink.rankFun(x))
melink.mse(sim)
melink.mse(x)
Q
sim.melink.z <- function(x, X0, nsim=999) {#
	la <- melink.mle(x)#
	res <- replicate(nsim, {#
		# browser()#
		sim <- rmelink(length(x), la, X0)#
		return(melink.mse(sim))#
	})#
	obs.mse <- melink.mse(x)#
	return(list(obs=obs.mse, z=(obs.mse - mean(res)) / sd(res), sim=res))#
}
sim.melink.z(x, X0)
x <- rowSums(bimat[[2]])#
x <- x[x > 0]#
points(sort(x, TRUE), col='blue')#
lines(melink.rankFun(x))
x <- rowSums(bimat[[2]])#
x <- x[x > 0]#
plot(sort(x, TRUE), col='blue')#
lines(melink.rankFun(x))
X0 <- sum(colSums(bimat[[1]]) > 0)
sim.melink.z(x, X0)
source('~/R_functions/den_fill.R')
den.fill
source('~/R_functions/den_fill.R')
col2rgb('red')
source('~/R_functions/den_fill.R')
degzplot <- function(web, margin, thr.col='red', nsim=999) {#
	x <- apply(web, margin, sum)#
	x <- x[x > 0]#
	X0 <- sum(apply(web, ifelse(margin==1, 2, 1), sum) > 0)#
	z <- sim.melink.z(x, X0, nsim)#
	den.fill(z$sim, xlim=range(unlist(z[-2])))#
	abline(v=z$obs, col=col.thr)#
}
degzplot(bimat[[1]], 1)
degzplot <- function(web, margin, thr.col='red', nsim=999) {#
	x <- apply(web, margin, sum)#
	x <- x[x > 0]#
	X0 <- sum(apply(web, ifelse(margin==1, 2, 1), sum) > 0)#
	z <- sim.melink.z(x, X0, nsim)#
	den.fill(log(z$sim), xlim=log(range(unlist(z[-2]))))#
	abline(v=log(z$obs), col=thr.col)#
}
degzplot(bimat[[1]], 1, nsim=9)
bla <- col2rgb('red')
rgb(bla[1,1], bla[2,1], bla[3, 1])
rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorBValue=255)
rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255))
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255, alpha=0.5), pch=16, cex=5)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255, alpha=1), pch=16, cex=5)
bla <- col2rgb('red', alpha=0.5)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255, alpha=0.5), pch=16, cex=5)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255), pch=16, cex=5)
bla <- col2rgb('red', alpha=TRUE)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255), pch=16, cex=5)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255, alpha=0.5), pch=16, cex=5)
plot(1, col=rgb(bla[1,1], bla[2,1], bla[3, 1], maxColorValue=255), pch=16, cex=5)
plot(1, col=rgb(255, 0, 0, maxColorValue=255), pch=16, cex=5)
plot(1, col=rgb(255, 0, 0, maxColorValue=255, alpha=100), pch=16, cex=5)
den.fill <- function(dist, alpha=0.05, col="black", lwd=2, transp=0.3, add=FALSE, ...) {    #
    ## specify the two densities#
    den1 <- density(dist)#
    quant1 <- quantile(dist,c(alpha/2,1-alpha/2))#
    ## establish plot window, axes, etc.#
    if(!add) plot(den1,col="transparent", ...)#
    ## compute polygon coords for CI#
    temp1 <- cbind(den1$x,den1$y)#
    temp1.mid <- temp1[which(quant1[1] < temp1[,1] & temp1[,1] < quant1[2]),]#
    x1.cord <- c(min(temp1.mid[,1]),temp1.mid[,1],max(temp1.mid[,1]))#
    y1.cord <- c(0,temp1.mid[,2],0)#
    ##	compute color#
    col.temp <- col2rgb(col)#
    colp <- rgb(col.temp[1,1], col.temp[2,1], col.temp[3,1], alpha=transp*255, maxColorValue=255)#
    coll <- col#
    polygon(x1.cord,y1.cord,col=colp,border=NA)#
    segments(min(temp1.mid[,1]),0,min(temp1.mid[,1]),temp1.mid[1,2],col=coll)#
    segments(max(temp1.mid[,1]),0,max(temp1.mid[,1]),temp1.mid[length(temp1.mid[,2]),2],col=coll)#
    ## add lines last for better visual presentation#
    lines(temp1,lwd=lwd,col=coll)#
}
degzplot(bimat[[1]], 1, nsim=9)
degzplot(bimat[[1]], 1)
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
}
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))
degzplot <- function(web, margin, thr.col='red', nsim=999, ...) {#
	x <- apply(web, margin, sum)#
	x <- x[x > 0]#
	X0 <- sum(apply(web, ifelse(margin==1, 2, 1), sum) > 0)#
	z <- sim.melink.z(x, X0, nsim)#
	den.fill(log(z$sim), xlim=log(range(unlist(z[-2]))), ...)#
	abline(v=log(z$obs), col=thr.col)#
}
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.6, 0.95, 0.75, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4))#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE)#
    box()#
    close.screen()#
}
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.6, 0.95, 0.75, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE)#
    box()#
    close.screen()#
}
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.6, 0.95, 0.75, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)
plot(1)
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.5, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}
source('speciesLevel_analysis.R')
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))#
#
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend('topleft', legend=c('Cosmopolitans', 'Island Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, bty='n')#
#
close.screen(all=TRUE)
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend(0.0007, 0.09, legend=c('Cosmopolitans', 'Island Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5, bty='n')
legend(0.0005, 0.1, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5, bty='n')
legend(0.0005, 0.11, legend=c('Cosmopolitans', 'Endemics'),
pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5, bty='n')
legend(0.0005, 0.15, legend=c('Cosmopolitans', 'Endemics'),
pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5, bty='n')
legend(0.0005, 0.13, legend=c('Cosmopolitans', 'Endemics'),
pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5, bty='n')
legend(0.0005, 0.12, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)
close.screen(all=TRUE)
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend(0.0005, 0.11, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)
pdf(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1, xpd=FALSE)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend(0.0005, 0.11, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)#
dev.off()
close.screen(all=TRUE)
dev.off()
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))#
#
pdf(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1, xpd=FALSE)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend(0.0005, 0.11, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)#
dev.off()
pdf(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=999, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1, xpd=FALSE)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend(0.0005, 0.11, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)#
dev.off()
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1, xpd=FALSE)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)
mtext('test', side=2)
mtext('test', side=2, line=2.5)
mtext('test', side=2, line=2)
mtext('Normalized degree', side=2, line=2)
close.screen(all=TRUE)
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend(0.0005, 0.11, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=2, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
par(xpd=FALSE)#
legend(0.0005, 0.12, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)
dev.off()
quartz(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=999, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
par(xpd=FALSE)#
legend(0.0005, 0.12, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)#
dev.off()
pdf(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    # if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      # pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
    split.screen(matrix(c(0.5, 0.95, 0.55, 0.95), ncol=4))#
    screen()#
    par(mar=rep(0.01, 4), xpd=FALSE)#
    degzplot(bimat[[i]], 1, nsim=999, axes=FALSE, main='', xlab='', ylab='')#
    box()#
    close.screen()#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
par(xpd=FALSE)#
legend(0.0005, 0.12, legend=c('Cosmopolitans', 'Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, pt.cex=1.5)#
#
close.screen(all=TRUE)#
dev.off()
4*10^3
4*10^3/10^6
library(bipartite)#
library(vegan)#
library(igraph)#
#
setwd('~/Dropbox/hawaiiDimensions/geb_paper/network')#
source('~/R_functions/my_ecdf.R')#
source('~/R_functions/logAxis.R')#
source('netFuns.R')#
#
## *****************************#
## Prep data#
## *****************************#
#
## get site info and specify which sites to analyze#
site.info <- read.csv('data/siteInfo.csv', as.is=TRUE)#
good.sites <- c('Kil', 'Koh', 'Hal', 'KoK')#
#
## load data#
bimat <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_conmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})#
#
## load network metric files#
netmet.prob <- read.csv('networkMetrics_con_prob1.csv', as.is=TRUE)#
netmet.qswap <- read.csv('networkMetrics_con_qswap.csv', as.is=TRUE)#
netmet <- rbind(netmet.prob, netmet.qswap)
met.col <- c('black', 'red', 'blue', 'red', 'blue')#
names(met.col) <- c('nodf', 'mod.rand.walk', 'mod.dendro', 'nmod.rand.walk', 'nmod.dendro')#
#
pdf(width=8.5, height=4, file='../ms/figSupp_netMetCons.pdf')#
par(mfrow=c(1, 3), oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 2, 0.2))#
#
for(i in unique(netmet$metric)) {#
	if(!grepl('dendro', i)) {#
	    plot(netmet$age_mya, netmet$z.value,#
             xlab='', ylab='', log='x', axes=FALSE, type='n')#
	    logAxis(1)#
	    if(i == 'nodf') axis(2)#
	    rect(10^par('usr')[1], -2, 10^par('usr')[2], 2, col='gray85', border=NA)#
        box()#
        mtext(line=0.5, text=switch(i, #
                                  'nodf'='Nestedness',#
                                  'mod.rand.walk'='Modularity',#
                                  'nmod.rand.walk'='Number of modules'))#
	}#
	for(j in unique(netmet$null.mod)) {#
		with(netmet[netmet$metric==i & netmet$null.mod==j, ], {#
		     # browser()#
		     points(age_mya, z.value, type='b',#
		            col=met.col[i], lty=ifelse(j=='qswap.null', 1, 2))#
		     })#
	}#
}#
#
mtext('Age (mya)', side=1, line=2.5, outer=TRUE)#
mtext('z-score', side=2, line=2.5, outer=TRUE)#
#
legend('topright', legend=c('NODF', 'Modularity: edge between', #
                            'Modularity: walk trap', 'Prob null', #
                            'Quasiswap null'),#
       lty=c(0, 0, 0, 2, 1), pch=c(1, 1, 1, NA, NA), #
       col=c('black', 'blue', 'red', 'gray', 'gray'))#
#
dev.off()
met.col <- c('black', 'red', 'blue', 'red', 'blue')#
names(met.col) <- c('nodf', 'mod.rand.walk', 'mod.dendro', 'nmod.rand.walk', 'nmod.dendro')#
#
pdf(width=8.5, height=4, file='../ms/figSupp_netMetCons.pdf')#
par(mfrow=c(1, 3), oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 2, 0.2))#
#
for(i in unique(netmet$metric)) {#
	if(!grepl('dendro', i)) {#
	    plot(netmet$age_mya, netmet$z.value,#
             xlab='', ylab='', log='x', axes=FALSE, type='n')#
	    logAxis(1)#
	    if(i == 'nodf') axis(2)#
	    # rect(10^par('usr')[1], -2, 10^par('usr')[2], 2, col='gray85', border=NA)#
        box()#
        mtext(line=0.5, text=switch(i, #
                                  'nodf'='Nestedness',#
                                  'mod.rand.walk'='Modularity',#
                                  'nmod.rand.walk'='Number of modules'))#
	}#
	for(j in unique(netmet$null.mod)) {#
		with(netmet[netmet$metric==i & netmet$null.mod==j, ], {#
		     # browser()#
		     points(age_mya, z.value, type='b',#
		            col=met.col[i], lty=ifelse(j=='qswap.null', 1, 2))#
		     })#
	}#
}#
#
mtext('Age (mya)', side=1, line=2.5, outer=TRUE)#
mtext('z-score', side=2, line=2.5, outer=TRUE)#
#
legend('topright', legend=c('NODF', 'Modularity: edge between', #
                            'Modularity: walk trap', 'Prob null', #
                            'Quasiswap null'),#
       lty=c(0, 0, 0, 2, 1), pch=c(1, 1, 1, NA, NA), #
       col=c('black', 'blue', 'red', 'gray', 'gray'))#
#
dev.off()
setwd('~/Dropbox/DimensionsStuff/geb_paper/network')
files
file()
files()
source('netFuns.R')
site.info <- read.csv('data/siteInfo.csv', as.is=TRUE)
good.sites <- c('Kil', 'Koh', 'Hal', 'KoK')
bimat <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_conmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})
## load network metric files#
netmet.prob <- read.csv('networkMetrics_con_prob1.csv', as.is=TRUE)#
netmet.qswap <- read.csv('networkMetrics_con_qswap.csv', as.is=TRUE)#
netmet <- rbind(netmet.prob, netmet.qswap)
str(bimat)
par(mfrow=c(1, 4), oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 2, 0.2))#
for(i in 1:4) {#
	degplot(bimat[[i]], 1, main=good.sites[i], #
            log='xy', yaxt='n', xaxt='n', xlim=c(1, 50))#
    logAxis(1)#
    if(i == 1) logAxis(2)#
}#
mtext('Number of links per node', side=1, outer=TRUE, line=2.5)#
mtext('Cumulative density', side=2, outer=TRUE, line=2.5)
degplot
library(bipartite)#
library(vegan)#
library(igraph)#
#
setwd('~/Dropbox/hawaiiDimensions/geb_paper/network')#
source('~/R_functions/my_ecdf.R')#
source('~/R_functions/logAxis.R')#
source('netFuns.R')#
#
## *****************************#
## Prep data#
## *****************************#
#
## get site info and specify which sites to analyze#
site.info <- read.csv('data/siteInfo.csv', as.is=TRUE)#
good.sites <- c('Kil', 'Koh', 'Hal', 'KoK')#
#
## load data#
bimat <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_unconmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})#
#
bimat.con <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_conmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})
setwd('~/Dropbox/Dim	ensionsStuff/geb_paper/network')#
source('~/R_functions/my_ecdf.R')#
source('~/R_functions/logAxis.R')#
source('netFuns.R')
setwd('~/Dropbox/Dim	ensionsStuff/geb_paper/network')
setwd('~/Dropbox/Dim	ensionsStuff/geb_paper/network')
setwd('~/Dropbox/DimensionsStuff/geb_paper/network')
source('netFuns.R')
site.info <- read.csv('data/siteInfo.csv', as.is=TRUE)#
good.sites <- c('Kil', 'Koh', 'Hal', 'KoK')#
#
## load data#
bimat <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_unconmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})#
#
bimat.con <- lapply(good.sites, #
                function(i) { #
                	    as.matrix(read.csv(sprintf('data/%s_conmat.csv', i), #
                	              row.names=1, header=TRUE, as.is=TRUE))#
                	})#
#
## load network metric files#
netmet.prob <- read.csv('networkMetrics_prob1.csv', as.is=TRUE)#
netmet.qswap <- read.csv('networkMetrics_qswap.csv', as.is=TRUE)#
netmet <- rbind(netmet.prob, netmet.qswap)#
#
netmet.prob.con <- read.csv('networkMetrics_con_prob1.csv', as.is=TRUE)#
#
## species level metrics#
source('speciesLevel_analysis.R')
pm <- function(null, met) {#
	with(netmet[netmet$null.mod == null & netmet$metric == met, ], {#
		plot(age_mya, z.value, col=met.col[metric], log='x', type='b', xaxt='n',#
		     xlab='', ylab='', cex=1.5, lwd=1.5,#
		     ylim=range(z.value) + c(-2, 2), yaxt='n',#
		     panel.first=arrows(x0=age_mya, y0=z.value-2, y1=z.value+2, #
		                        col=met.col[metric], length=0, lwd=1.5),#
		     pch=21, bg='white')#
		axis(2, pretty(range(z.value) + c(-2, 2), n=2))#
	})#
}#
#
## metric colors consistent with supplamental fig#
met.col <- c('black', 'blue')#
names(met.col) <- c('nodf', 'mod.dendro')
split.screen(c(2, 1))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0.4, 0), mgp=c(2, 0.75, 0))#
#
screen(1)#
par(this.par)#
pm('prob.null1', 'nodf')#
text(10^par('usr')[1], par('usr')[3], labels='nestedness', adj=c(-0.1, -0.2), cex=1.5)#
#
screen(2)#
par(this.par)#
pm('prob.null1', 'mod.dendro')#
text(10^par('usr')[1], par('usr')[4], labels='modularity', #
     adj=c(-0.1, 1.2), cex=1.5, col='blue')#
logAxis(1)#
#
mtext('Age (mya)', side=1, line=2)#
mtext('z-score', side=2, line=2, outer=TRUE)
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})#
logAxis(1)#
logAxis(2)#
# axis(2, at=c(0.02, 0.06, 0.1))#
legend('topleft', legend=c('Cosmopolitans', 'Island Endemics'), #
       pch=c(16, 1), col=c('gray45', 'black'), pt.lwd=1.5, bty='n')#
#
close.screen(all=TRUE)
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))
source('speciesLevel_analysis.R')
source('speciesLevel_analysis_JYL.R')
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))
setwd('~/Dropbox/DimensionsStuff/geb_paper/network')
source('speciesLevel_analysis_JYL.R')
source('speciesLevel_analysis_JYL.R')
source('speciesLevel_analysis_JYL.R')
sppLevel.ps
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))
degree.summ
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
}
source('netFuns.R')
source('netFuns_JYL.R')
source('netFuns_JYL.R')
install.packages("distr")
source('speciesLevel_analysis_JYL.R')
degree.summ <- with(sppLevel.ps, #
                    aggregate(list(norm.degree=normalised.degree), #
                              list(site=site, Endemicity=Endemicity), #
                              function(x) c(mean=mean(x), se=2*sd(x)/sqrt(length(x)))))#
#
pdf(width=8, height=5, file='fig_linkDist.pdf')#
split.screen(c(2, 1))#
split.screen(c(1, 4))#
this.par <- list(oma=c(3, 3, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
#
for(i in 1:4) {#
	screen(i + 2)#
	par(this.par)#
	# par(oma=c(4, 4, 0, 0) + 0.1, mar=c(0, 0, 0, 0) + 0.1, xpd=NA, mgp=c(2, 0.75, 0))#
	degplot(bimat[[i]], 1, rad=TRUE,#
            log='y', yaxt='n', xaxt='n', ylim=c(1, 40),#
            xlab='', ylab=ifelse(i==1, 'Degree', ''))#
    if(i == 1) logAxis(2)#
    if(i == 4) legend('topright', legend=c('data', 'theory'), #
                      pch=c(1, NA), lty=c(NA, 1), col=c('black', 'red'), bty='n')#
}#
#
screen(2)#
par(this.par)#
par(mar=c(0, 0, 3, 0) + 0.1)#
with(degree.summ, {#
     x <- site.info$age_mya[match(site, site.info$siteCode)]*(1 + (as.numeric(as.factor(Endemicity)) - 1)/8)#
     plot(x, norm.degree[, 'mean'], log='xy', xaxt='n', yaxt='n',#
          ylim=range(1.1*apply(norm.degree, 1, sum), -0.8*apply(norm.degree, 1, diff)),#
          panel.first=arrows(x0=x,#
                             y0=-apply(norm.degree, 1, diff),#
                             y1=apply(norm.degree, 1, sum),#
                             code=3, angle=90, length=0,#
                             col=c('gray45', 'black')[as.factor(Endemicity)],#
                             lwd=2),#
          col=c('gray45', 'black')[as.factor(Endemicity)], pch=c(16, 21)[as.factor(Endemicity)],#
          bg='white', xlab='Age (mya)', ylab='Normalized degree',#
          cex=1.5, lwd=1.5)#
})
degplot
?? qmelink
